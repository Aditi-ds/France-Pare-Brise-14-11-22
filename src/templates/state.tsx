import * as React from "react";
import Banner from "../components/locationDetails/banner";
import Footer from "../components/layouts/footer";
import Header from "../components/layouts/header";
import BreadCrumbs from "../components/layouts/BreadCrumbs";
import GetDirection from "../components/commons/GetDirection";
// import { stagingBaseUrl } from "../constants";
import bannerImage from "../images/francepare1.png";
import favicon from "../images/favicon.png"
import "../index.css";
import {
  Template,
  GetPath,
  GetRedirects,
  TemplateConfig,
  TemplateProps,
  TemplateRenderProps,
  GetHeadConfig,
  HeadConfig,
} from "@yext/pages";
// import Logo from "../images/dreams-logo.svg";

var currentUrl = "";


export const config: TemplateConfig = {
  stream: {
    $id: "states",
    filter: {
      savedFilterIds: ["dm_franceparebrise-directory_address_region"],
    },
    fields: [
      "id",
      "uid",
      "meta",
      "address",
      "name",
      "description",
      "slug",
      "c_title",
      "c_primaryCTA",
      "c_backgroundImage",
      "c_metaTags",
      "c_ogMetaTag",
      "dm_directoryParents.name",
      "dm_directoryParents.slug",
      "dm_directoryParents.meta.entityType",
      "dm_directoryChildren.name",
      "dm_directoryChildren.slug",
      "dm_directoryChildren.dm_directoryChildrenCount",

    ],
    localization: {
      locales: ["fr"],
      primary: false,
    },
  },
};

export const getPath: GetPath<TemplateProps> = ({ document }) => {
  var slug: any = "";
  document.dm_directoryParents.map((i: any) => {
    if (i.meta.entityType.id == "ce_country") {
      slug = i.slug
    }
  })
  return `${slug}/${document.slug.toString()}.html`;
};
var currentUrl = ""
export const getHeadConfig: GetHeadConfig<TemplateRenderProps> = ({
  relativePrefixToRoot,
  path,
  document,
}): HeadConfig => {
  return {
    title: document.name,
    charset: "UTF-8",
    viewport: "width=device-width, initial-scale=1",
    tags: [
      {
        type: "link",
        attributes: {
          rel: "icon",
          type: "image/x-icon",
          href: favicon,
        },
      },
      {
        type: "meta",
        attributes: {
          description: "This site was generated by the Yext SSG",
        },
      },
      {
        type: "meta",
        attributes: {
          name: "description",
          content: `${document.c_metaTags.description ? document.c_metaTags.description : ""
            }`,
        },
      },

      {
        type: "meta",
        attributes: {
          name: "title",
          content: `${document.c_metaTags.title ? document.c_metaTags.title : ""}`,
        },
      },
      {
        type: "meta",
        attributes: {
          name: "author",
          content: `${document.c_metaTags.author ? document.c_metaTags.author : ""}`,
        },
      },

      {
        type: "meta",
        attributes: {
          name: "robots",
          content: `${document.c_metaTags.robot ? document.c_metaTags.robot : ""}`,
        },
      },

      {
        type: "link",
        attributes: {
          rel: "canonical",
          href:
            "https://master-conflict--spoils--dispersal-sbx-pgsdemo-com.sbx.preview.pagescdn.com/" +
            ` ${document.c_metaTags.c_canonicalURL ? document.c_metaTags.c_canonicalURL : ""}`,
        },
      },
      // og tags

      {
        type: "meta",
        attributes: {
          property: "og:url",
          content: "https://master-conflict--spoils--dispersal-sbx-pgsdemo-com.sbx.preview.pagescdn.com/" + currentUrl,
        },
      },

      {
        type: "meta",
        attributes: {
          property: "og:description",
          content: `${document.c_ogMetaTag.ogdescription ? document.c_ogMetaTag.ogdescription : ""
            }`,
        },
      },
      {
        type: "meta",
        attributes: {
          property: "og:title",
          content: `${document.c_ogMetaTag.ogtitle ? document.c_ogMetaTag.ogtitle : ""}`,
        },
      },
      {
        type: "meta",
        attributes: {
          property: "og:image",

          content: `${document.logo ? document.logo.image.url : ""}`,
        },
      },
    ],
  };
};

const State: Template<TemplateRenderProps> = ({
  relativePrefixToRoot,
  path,
  document,
}) => {
  const {
    name,
    c_title,
    c_primaryCTA,
    c_backgroundImage,
    description,
    address,
    dm_directoryParents,
    dm_directoryChildren,
    c_addressRegionDisplayName,
  } = document;

  var sortedChildren = dm_directoryChildren.sort(function (a: any, b: any) {
    var a = a.name;
    var b = b.name;
    return a < b ? -1 : a > b ? 1 : 0;
  });

  let slugString = "";
  document.dm_directoryParents.forEach((e: any) => {
    slugString += e.slug + "/";
  });

  const childrenDivs = dm_directoryChildren.map((entity: any) => {
    let url: any = "";
    url = document.slug.toString();
    let url1: any = "";
    url1 = url.replace(/(\b\S.+\b)(?=.*\1)/g, "").trim();

    return (
      <div className="w-1/2 storelocation-category md:w-1/3 lg:w-1/4 px-4">
        <a
          key={entity.slug}
          href={document.slug.toString() + "/" + entity.slug + ".html"}

          className="hover:text-red"
        >
          {entity.name} ({entity.dm_directoryChildrenCount})
        </a>
      </div>
    );
  });

  return (
    <>
      <Header />
      <BreadCrumbs
        name={name}
        parents={dm_directoryParents}
        baseUrl={relativePrefixToRoot}
        address={{}}
      ></BreadCrumbs>

      {/* <Banner
        Name={name}
        TagLine={c_title}
        CtaButton={c_primaryCTA}
        // BackgroundImage={photoGallery?.image?.url}
        BackgroundImage={
          c_backgroundImage ? c_backgroundImage.url : bannerImage
        }
      /> */}

      {/* <div className="hero">
        <img className="heroBanner" src={bannerImage} alt="" /> */}
        <div className="hero-content">
          <h1><strong> Cities in {name} , {document.dm_directoryParents[1].name} {" "}</strong></h1>
        </div>
      {/* </div> */}

      <div className="centered-container min-h-[550px]">
        <div className="directory-region py-5 lg:py-[60px]">
          <div className="container">
            <div className="flex flex-wrap font-serif font-semibold -mx-4">
              {childrenDivs}
            </div>
          </div>
        </div>
      </div>
      <Footer />
    </>
  );
};

export default State;
